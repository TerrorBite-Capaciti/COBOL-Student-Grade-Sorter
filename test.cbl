*> ***********************************************
*> COBOL Program: Student Records Sorting      *
*>**********************************************

IDENTIFICATION DIVISION.
PROGRAM-ID. SORT-STUDENT-FILE.

ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
    SELECT STUDENT-FILE ASSIGN TO 'students_file.csv'
        ORGANIZATION IS LINE SEQUENTIAL.

    SELECT SORT-WORK ASSIGN TO 'temp_sort_file.csv'.

    SELECT SORTED-STUDENT-FILE ASSIGN TO 'sorted_students.txt'
        ORGANIZATION IS LINE SEQUENTIAL.

DATA DIVISION.
FILE SECTION.

FD STUDENT-FILE.
01 STUDENT-RECORD.
   05 STUDENT-ID     PIC X(5).
   05 COMMA1         PIC X.
   05 FIRST-NAME     PIC A(15).
   05 COMMA2         PIC X.
   05 LAST-NAME      PIC A(15).
   05 COMMA3         PIC X.
   05 GRADE          PIC 9(3).
   05 COMMA4         PIC X.
   05 AGE            PIC 9(2).
   05 COMMA5         PIC X.
   05 COURSE         PIC X(15).

SD SORT-WORK.
01 SORT-RECORD.
   05 S-STUDENT-ID     PIC X(5).
   05 S-FIRST-NAME     PIC A(15).
   05 S-LAST-NAME      PIC A(15).
   05 S-GRADE          PIC 9(3).
   05 S-AGE            PIC 9(2).
   05 S-COURSE         PIC X(15).

WORKING-STORAGE SECTION.
01 WS-VAR.
   05 INPUT-FILE-SW PIC X(1) VALUE 'N'.
     88 EOF-INPUT-FILE VALUE 'Y'.
     88 NOT-EOF-INPUT-FILE VALUE 'N'.

01 HEADER-NAMES PIC X(48).

PROCEDURE DIVISION.
SORT-PROCESS.
    SORT SORT-WORK ON ASCENDING KEY STUDENT-ID
        INPUT PROCEDURE READ-STUDENT-RECORDS
        *> OUTPUT PROCEDURE WRITE-STUDENT-RECORDS.
        GIVING SORTED-STUDENT-FILE
    STOP RUN.

READ-STUDENT-RECORDS.
    OPEN INPUT STUDENT-FILE.
    SET NOT-EOF-INPUT-FILE TO TRUE

    PERFORM UNTIL EOF-INPUT-FILE
    READ STUDENT-FILE
        AT END SET EOF-INPUT-FILE TO TRUE

        NOT AT END
        UNSTRING STUDENT-RECORD DELIMITED BY ',' INTO
        S-STUDENT-ID, S-FIRST-NAME, S-LAST-NAME, S-GRADE, S-AGE, S-COURSE
    *> END-READ
    *> END-PERFORM.

    *> READ STUDENT-FILE.
    *> Skip the header row
    *> IF STUDENT-ID = 'Student ID' OR STUDENT-ID = 'STUDENT-ID'
        *> READ STUDENT-FILE

        *> MOVE STUDENT-ID TO S-STUDENT-ID
        *> MOVE FIRST-NAME TO S-FIRST-NAME
        *> MOVE LAST-NAME TO S-LAST-NAME
        *> MOVE GRADE TO S-GRADE
        *> MOVE AGE TO S-AGE
        *> MOVE COURSE TO S-COURSE
        RELEASE SORT-RECORD
        DISPLAY SORT-RECORD
        READ STUDENT-FILE AT END MOVE 'Y' TO INPUT-FILE-SW

    END-PERFORM

    CLOSE STUDENT-FILE.

WRITE-STUDENT-RECORDS.
    OPEN OUTPUT SORTED-STUDENT-FILE.
    *> MOVE "Student ID,First Name,Last Name,Grade,Age,Course" TO HEADER-NAMES.
    *> WRITE SORTED-STUDENT-FILE FROM HEADER-NAMES
    PERFORM UNTIL EOF-INPUT-FILE
        RETURN SORT-WORK AT END MOVE 'Y' TO INPUT-FILE-SW
        WRITE STUDENT-RECORD FROM SORT-RECORD
    END-PERFORM.

    CLOSE SORTED-STUDENT-FILE.

*> ***********************************************
*> * End of Program                              *
*> ***********************************************
